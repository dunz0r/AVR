   1               		.file	"adc.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   8               		.text
   9               	.Ltext0:
  72               	.global	init_adc
  74               	init_adc:
   1:adc.c         **** /*
   2:adc.c         ****  * File Name : adc.c
   3:adc.c         ****  * Purpose : Provice adc reading functions
   4:adc.c         ****  * Creation Date : 2013-01-08
   5:adc.c         ****  * Last Modified : Wed 16 Jan 2013 21:28:37 CET
   6:adc.c         ****  * Created By : Gabriel Fornaeus, <gf@hax0r.se>
   7:adc.c         ****  *
   8:adc.c         ****  */
   9:adc.c         **** 
  10:adc.c         **** 
  11:adc.c         **** #include "adc.h"
  12:adc.c         **** // ad_value is an array that contains all the ad values
  13:adc.c         **** volatile unsigned char ad_value[NR_AD_CHANNEL];
  14:adc.c         **** // Local values
  15:adc.c         **** volatile unsigned char ad_count=0;
  16:adc.c         **** 
  17:adc.c         **** /*{{{ Initialize adc */
  18:adc.c         **** void init_adc(void) {
  76               	.LM0:
  77               	.LFBB1:
  78               	/* prologue: function */
  79               	/* frame size = 0 */
  80               	/* stack size = 0 */
  81               	.L__stack_usage = 0
  19:adc.c         **** 	//5V AREF and left adjusted result for 8-bit resolution
  20:adc.c         **** 	ADMUX |= (1<<REFS0);
  83               	.LM1:
  84 0000 ACE7      		ldi r26,lo8(124)
  85 0002 B0E0      		ldi r27,0
  86 0004 8C91      		ld r24,X
  87 0006 8064      		ori r24,lo8(64)
  88 0008 8C93      		st X,r24
  21:adc.c         **** 
  22:adc.c         **** 	//AD enable, AD interrupt enable and clk/128 prescaling
  23:adc.c         **** 	ADCSRA |= (1<<ADEN) | (1<<ADIE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
  90               	.LM2:
  91 000a EAE7      		ldi r30,lo8(122)
  92 000c F0E0      		ldi r31,0
  93 000e 8081      		ld r24,Z
  94 0010 8F68      		ori r24,lo8(-113)
  95 0012 8083      		st Z,r24
  24:adc.c         **** 	
  25:adc.c         **** 	// Prepares first ad channel
  26:adc.c         **** 	ADMUX &= 0xF8;
  97               	.LM3:
  98 0014 8C91      		ld r24,X
  99 0016 887F      		andi r24,lo8(-8)
 100 0018 8C93      		st X,r24
  27:adc.c         **** 
  28:adc.c         **** 	//Starts the first conversion
  29:adc.c         **** 	ADCSRA |= (1<<ADSC);
 102               	.LM4:
 103 001a 8081      		ld r24,Z
 104 001c 8064      		ori r24,lo8(64)
 105 001e 8083      		st Z,r24
 106 0020 0895      		ret
 108               	.Lscope1:
 110               	.global	__vector_21
 112               	__vector_21:
  30:adc.c         **** }
  31:adc.c         **** /*}}}*/
  32:adc.c         **** 
  33:adc.c         **** /* {{{ Interrupts that saves the converted value to the array of values and starts a new conversion
  34:adc.c         **** ISR(ADC_vect){
 114               	.LM5:
 115               	.LFBB2:
 116 0022 1F92      		push r1
 117 0024 0F92      		push r0
 118 0026 0FB6      		in r0,__SREG__
 119 0028 0F92      		push r0
 120 002a 1124      		clr __zero_reg__
 121 002c 8F93      		push r24
 122 002e 9F93      		push r25
 123 0030 EF93      		push r30
 124 0032 FF93      		push r31
 125               	/* prologue: Signal */
 126               	/* frame size = 0 */
 127               	/* stack size = 7 */
 128               	.L__stack_usage = 7
  35:adc.c         **** 	ad_value[ad_count]=ADCH;
 130               	.LM6:
 131 0034 E091 0000 		lds r30,ad_count
 132 0038 F0E0      		ldi r31,0
 133 003a 8091 7900 		lds r24,121
 134 003e E050      		subi r30,lo8(-(ad_value))
 135 0040 F040      		sbci r31,hi8(-(ad_value))
 136 0042 8083      		st Z,r24
  36:adc.c         **** 
  37:adc.c         **** 	if(ad_count<(NR_AD_CHANNEL-1))
 138               	.LM7:
 139 0044 8091 0000 		lds r24,ad_count
 140 0048 8230      		cpi r24,lo8(2)
 141 004a 00F4      		brsh .L3
  38:adc.c         **** 		ad_count++;
 143               	.LM8:
 144 004c 8091 0000 		lds r24,ad_count
 145 0050 8F5F      		subi r24,lo8(-(1))
 146 0052 8093 0000 		sts ad_count,r24
 147 0056 00C0      		rjmp .L4
 148               	.L3:
  39:adc.c         **** 	else
  40:adc.c         **** 		ad_count=0;
 150               	.LM9:
 151 0058 1092 0000 		sts ad_count,__zero_reg__
 152               	.L4:
  41:adc.c         **** 
  42:adc.c         **** 	// Select ADC channel with safety mask
  43:adc.c         **** 	ADMUX = (ADMUX & 0xF8) | ad_count;
 154               	.LM10:
 155 005c 8091 7C00 		lds r24,124
 156 0060 9091 0000 		lds r25,ad_count
 157 0064 887F      		andi r24,lo8(-8)
 158 0066 892B      		or r24,r25
 159 0068 8093 7C00 		sts 124,r24
  44:adc.c         **** 	ADCSRA |= (1<<ADSC);
 161               	.LM11:
 162 006c 8091 7A00 		lds r24,122
 163 0070 8064      		ori r24,lo8(64)
 164 0072 8093 7A00 		sts 122,r24
 165               	/* epilogue start */
  45:adc.c         **** }
 167               	.LM12:
 168 0076 FF91      		pop r31
 169 0078 EF91      		pop r30
 170 007a 9F91      		pop r25
 171 007c 8F91      		pop r24
 172 007e 0F90      		pop r0
 173 0080 0FBE      		out __SREG__,r0
 174 0082 0F90      		pop r0
 175 0084 1F90      		pop r1
 176 0086 1895      		reti
 178               	.Lscope2:
 179               	.global	ad_count
 180               		.section .bss
 183               	ad_count:
 184 0000 00        		.zero	1
 185               		.comm	ad_value,3,1
 188               		.text
 190               	.Letext0:
 191               		.ident	"GCC: (GNU) 4.7.2"
 192               	.global __do_clear_bss
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
     /tmp/ccuWcvs0.s:2      *ABS*:0000003e __SP_H__
     /tmp/ccuWcvs0.s:3      *ABS*:0000003d __SP_L__
     /tmp/ccuWcvs0.s:4      *ABS*:0000003f __SREG__
     /tmp/ccuWcvs0.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccuWcvs0.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccuWcvs0.s:74     .text:00000000 init_adc
     /tmp/ccuWcvs0.s:112    .text:00000022 __vector_21
     /tmp/ccuWcvs0.s:183    .bss:00000000 ad_count
                            *COM*:00000003 ad_value

UNDEFINED SYMBOLS
__do_clear_bss
